{
  "swagger" : "2.0",
  "info" : {
    "description" : "You can use this API to access all our API endpoints, such as: -Price -Strategy -Managed Listings -Batch status",
    "version" : "1.0.0",
    "title" : "Appeagle API",
    "termsOfService" : "http://swagger.io/terms/",
    "contact" : {
      "email" : "apiteam@swagger.io"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host" : "petstore.swagger.io",
  "basePath" : "/v2",
  "schemes" : [ "http" ],
  "paths" : {
    "/price" : {
      "post" : {
        "tags" : [ "price" ],
        "summary" : "To retrieve prices for all listings in a marketplace you need the marketplace ID.",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Price"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "price" ],
        "summary" : "Update a price for a specific listing",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Price"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "marketplaceID not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/user/createWithArray" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "operationId" : "createUsersWithArrayInput",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Strategy Mappings"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      }
    },
    "/user/createWithList" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "description" : "",
        "operationId" : "createUsersWithListInput",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Strategy Mappings"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      }
    },
    "/user/login" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "description" : "",
        "operationId" : "loginUser",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "description" : "The user name for login"
        }, {
          "name" : "password",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "description" : "The password for login in clear text"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            },
            "headers" : {
              "X-Rate-Limit" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "calls per hour allowed by the user"
              },
              "X-Expires-After" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "date in UTC when token expires"
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs out current logged in user session",
        "operationId" : "logoutUser",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      }
    },
    "/user/{username}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user by user name",
        "description" : "",
        "operationId" : "getUserByName",
        "produces" : [ "application/xml", "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Strategy Mappings"
            }
          },
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Updated user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Strategy Mappings"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid user supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteUser",
        "parameters" : [ ],
        "responses" : {
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "parameters" : [ {
        "name" : "username",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "The name that needs to be fetched. Use user1 for testing. "
      } ]
    },
    "/strategyMappings" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "createUser",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Strategy Mappings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "petstore_auth" : {
      "type" : "oauth2",
      "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
      "flow" : "implicit",
      "scopes" : {
        "write:pets" : "modify pets in your account",
        "read:pets" : "read your pets"
      }
    },
    "api_key" : {
      "type" : "apiKey",
      "name" : "api_key",
      "in" : "header"
    }
  },
  "definitions" : {
    "Order" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "petId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32"
        },
        "shipDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "status" : {
          "type" : "string",
          "description" : "Order Status",
          "enum" : [ "placed", "approved", "delivered" ]
        },
        "complete" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "Category" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "Tag" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "Price" : {
      "type" : "object",
      "required" : [ "marketplaceid", "sku" ],
      "properties" : {
        "marketplaceid" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 10020
        },
        "sku" : {
          "type" : "integer",
          "format" : "int64",
          "example" : "EU-L9FK-6II9"
        },
        "MinPrice" : {
          "type" : "integer",
          "format" : "int64",
          "example" : "2.45"
        },
        "MaxPrice" : {
          "type" : "integer",
          "format" : "int64",
          "example" : "2.88"
        },
        "CurrentPrice" : {
          "type" : "integer",
          "format" : "int64",
          "example" : "2.77"
        },
        "CurrentShipping" : {
          "type" : "integer",
          "format" : "int64",
          "example" : "5.02"
        },
        "MapPrice" : {
          "type" : "integer",
          "format" : "int64",
          "example" : "0.02"
        },
        "Cost" : {
          "type" : "integer",
          "format" : "int64",
          "example" : "7.01"
        },
        "CostCurrency" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1
        }
      }
    },
    "ApiResponse" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "type" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "Strategy Mappings" : {
      "type" : "object",
      "required" : [ "SKU", "StrategyID" ],
      "properties" : {
        "listingType" : {
          "type" : "string",
          "description" : "Listing Type",
          "enum" : [ "Amazon MFN", "Amazon FBA" ]
        },
        "SKU" : {
          "type" : "string",
          "description" : "Proper SKU for the listing"
        },
        "StrategyID" : {
          "type" : "integer"
        }
      },
      "description" : "Returns which listings are mapped to which strategies"
    }
  }
}